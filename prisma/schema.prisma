generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String

  servers   Server[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique

  members    Member[]
  channels   Channel[]

  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                    String         @id @default(uuid())
  role                  MemberRole     @default(GUEST)

  profileId             String         @map(name: "profile_id")
  profile               Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId              String         @map(name: "server_id")
  server                Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages              Message[]
  directMessages        DirectMessage[]

  conversationsInitiated Conversation[] @relation("memberOne")
  conversationsReceived Conversation[] @relation("memberTwo")

  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String    @id @default(uuid())
  name      String
  type      ChannelType

  profileId String    @map(name: "profile_id")
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String    @map(name: "server_id")
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  fileUrl   String?
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model DirectMessage {
  id               String       @id @default(uuid())
  content          String
  fileUrl          String?
  memberId         String
  member           Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationsId  String
  conversation     Conversation @relation(fields: [conversationsId], references: [id], onDelete: Cascade)
  deleted          Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([conversationsId])
  @@index([memberId])
}

model Conversation {
  id          String          @id @default(uuid())
  memberOneId String
  memberOne   Member          @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member          @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([memberOneId])
  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}
